// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.ApiV2.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ConvertionRequest
    {
        /// <summary>
        /// Initializes a new instance of the ConvertionRequest class.
        /// </summary>
        public ConvertionRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConvertionRequest class.
        /// </summary>
        public ConvertionRequest(string baseAssetId, IList<AssetWithAmount> assetsFrom, string orderAction)
        {
            BaseAssetId = baseAssetId;
            AssetsFrom = assetsFrom;
            OrderAction = orderAction;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BaseAssetId")]
        public string BaseAssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssetsFrom")]
        public IList<AssetWithAmount> AssetsFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrderAction")]
        public string OrderAction { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BaseAssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BaseAssetId");
            }
            if (AssetsFrom == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetsFrom");
            }
            if (OrderAction == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OrderAction");
            }
            if (AssetsFrom != null)
            {
                foreach (var element in AssetsFrom)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
