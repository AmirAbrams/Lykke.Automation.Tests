// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.ApiV2.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class AssetModel
    {
        /// <summary>
        /// Initializes a new instance of the AssetModel class.
        /// </summary>
        public AssetModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AssetModel class.
        /// </summary>
        public AssetModel(string id, string name, string displayId, int accuracy, bool kycNeeded, bool bankCardsDepositEnabled, bool swiftDepositEnabled, bool blockchainDepositEnabled, string categoryId, bool isBase, bool canBeBase, string iconUrl)
        {
            Id = id;
            Name = name;
            DisplayId = displayId;
            Accuracy = accuracy;
            KycNeeded = kycNeeded;
            BankCardsDepositEnabled = bankCardsDepositEnabled;
            SwiftDepositEnabled = swiftDepositEnabled;
            BlockchainDepositEnabled = blockchainDepositEnabled;
            CategoryId = categoryId;
            IsBase = isBase;
            CanBeBase = canBeBase;
            IconUrl = iconUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayId")]
        public string DisplayId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Accuracy")]
        public int Accuracy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "KycNeeded")]
        public bool KycNeeded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BankCardsDepositEnabled")]
        public bool BankCardsDepositEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SwiftDepositEnabled")]
        public bool SwiftDepositEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockchainDepositEnabled")]
        public bool BlockchainDepositEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CategoryId")]
        public string CategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsBase")]
        public bool IsBase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CanBeBase")]
        public bool CanBeBase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IconUrl")]
        public string IconUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (DisplayId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DisplayId");
            }
            if (CategoryId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CategoryId");
            }
            if (IconUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IconUrl");
            }
        }
    }
}
