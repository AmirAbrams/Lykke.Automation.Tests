// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.ApiV2.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for HistoryOperationState.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum OperationStatus
    {
        [EnumMember(Value = "InProgress")]
        InProgress,
        [EnumMember(Value = "Finished")]
        Finished,
        [EnumMember(Value = "Canceled")]
        Canceled,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "Created")]
        Created,
        [EnumMember(Value = "Confirmed")]
        Confirmed
    }
    internal static class OperationStatusEnumExtension
    {
        internal static string ToSerializedValue(this OperationStatus? value)
        {
            return value == null ? null : ((OperationStatus)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this OperationStatus value)
        {
            switch( value )
            {
                case OperationStatus.InProgress:
                    return "InProgress";
                case OperationStatus.Finished:
                    return "Finished";
                case OperationStatus.Canceled:
                    return "Canceled";
                case OperationStatus.Failed:
                    return "Failed";
            }
            return null;
        }

        internal static OperationStatus? ParseHistoryOperationState(this string value)
        {
            switch( value )
            {
                case "InProgress":
                    return OperationStatus.InProgress;
                case "Finished":
                    return OperationStatus.Finished;
                case "Canceled":
                    return OperationStatus.Canceled;
                case "Failed":
                    return OperationStatus.Failed;
            }
            return null;
        }
    }
}
