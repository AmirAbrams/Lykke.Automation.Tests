// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.ApiV2.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class FxPaygatePaymentUrlResponseModel
    {
        /// <summary>
        /// Initializes a new instance of the FxPaygatePaymentUrlResponseModel
        /// class.
        /// </summary>
        public FxPaygatePaymentUrlResponseModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FxPaygatePaymentUrlResponseModel
        /// class.
        /// </summary>
        public FxPaygatePaymentUrlResponseModel(string url, string okUrl, string failUrl, string cancelUrl)
        {
            Url = url;
            OkUrl = okUrl;
            FailUrl = failUrl;
            CancelUrl = cancelUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Url")]
        public string Url { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OkUrl")]
        public string OkUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FailUrl")]
        public string FailUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CancelUrl")]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
            if (OkUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OkUrl");
            }
            if (FailUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FailUrl");
            }
            if (CancelUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CancelUrl");
            }
        }
    }
}
