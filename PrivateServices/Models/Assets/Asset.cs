// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.AutorestClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Asset
    {
        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        public Asset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        /// <param name="blockchain">Possible values include: 'None',
        /// 'Bitcoin', 'Ethereum'</param>
        /// <param name="type">Possible values include: 'Erc20Token'</param>
        public Asset(int accuracy, bool bankCardsDepositEnabled, bool otherDepositOptionsEnabled, Blockchain blockchain, bool blockchainDepositEnabled, bool blockchainWithdrawal, bool buyScreen, bool crosschainWithdrawal, int defaultOrder, double dustLimit, int forwardFrozenDays, bool forwardWithdrawal, bool hideDeposit, bool hideIfZero, bool hideWithdraw, bool isBase, bool isDisabled, bool isTradable, bool issueAllowed, bool kycNeeded, int multiplierPower, bool notLykkeAsset, bool sellScreen, bool swiftDepositEnabled, bool swiftWithdrawal, bool isTrusted, bool privateWalletsEnabled, double cashinMinimalAmount, double cashoutMinimalAmount, string assetAddress = default(string), string blockChainAssetId = default(string), string blockChainId = default(string), string blockchainIntegrationLayerId = default(string), string blockchainIntegrationLayerAssetId = default(string), string categoryId = default(string), string definitionUrl = default(string), int? displayAccuracy = default(int?), string displayId = default(string), string forwardBaseAsset = default(string), string forwardMemoUrl = default(string), string iconUrl = default(string), string id = default(string), string idIssuer = default(string), double? lowVolumeAmount = default(double?), string name = default(string), IList<string> partnerIds = default(IList<string>), string symbol = default(string), AssetType? type = default(AssetType?), string lykkeEntityId = default(string))
        {
            Accuracy = accuracy;
            AssetAddress = assetAddress;
            BankCardsDepositEnabled = bankCardsDepositEnabled;
            OtherDepositOptionsEnabled = otherDepositOptionsEnabled;
            Blockchain = blockchain;
            BlockChainAssetId = blockChainAssetId;
            BlockchainDepositEnabled = blockchainDepositEnabled;
            BlockChainId = blockChainId;
            BlockchainWithdrawal = blockchainWithdrawal;
            BlockchainIntegrationLayerId = blockchainIntegrationLayerId;
            BlockchainIntegrationLayerAssetId = blockchainIntegrationLayerAssetId;
            BuyScreen = buyScreen;
            CategoryId = categoryId;
            CrosschainWithdrawal = crosschainWithdrawal;
            DefaultOrder = defaultOrder;
            DefinitionUrl = definitionUrl;
            DisplayAccuracy = displayAccuracy;
            DisplayId = displayId;
            DustLimit = dustLimit;
            ForwardBaseAsset = forwardBaseAsset;
            ForwardFrozenDays = forwardFrozenDays;
            ForwardMemoUrl = forwardMemoUrl;
            ForwardWithdrawal = forwardWithdrawal;
            HideDeposit = hideDeposit;
            HideIfZero = hideIfZero;
            HideWithdraw = hideWithdraw;
            IconUrl = iconUrl;
            Id = id;
            IdIssuer = idIssuer;
            IsBase = isBase;
            IsDisabled = isDisabled;
            IsTradable = isTradable;
            IssueAllowed = issueAllowed;
            KycNeeded = kycNeeded;
            LowVolumeAmount = lowVolumeAmount;
            MultiplierPower = multiplierPower;
            Name = name;
            NotLykkeAsset = notLykkeAsset;
            PartnerIds = partnerIds;
            SellScreen = sellScreen;
            SwiftDepositEnabled = swiftDepositEnabled;
            SwiftWithdrawal = swiftWithdrawal;
            Symbol = symbol;
            Type = type;
            IsTrusted = isTrusted;
            PrivateWalletsEnabled = privateWalletsEnabled;
            CashinMinimalAmount = cashinMinimalAmount;
            CashoutMinimalAmount = cashoutMinimalAmount;
            LykkeEntityId = lykkeEntityId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Accuracy")]
        public int Accuracy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AssetAddress")]
        public string AssetAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BankCardsDepositEnabled")]
        public bool BankCardsDepositEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OtherDepositOptionsEnabled")]
        public bool OtherDepositOptionsEnabled { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'None', 'Bitcoin', 'Ethereum'
        /// </summary>
        [JsonProperty(PropertyName = "Blockchain")]
        public Blockchain Blockchain { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockChainAssetId")]
        public string BlockChainAssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockchainDepositEnabled")]
        public bool BlockchainDepositEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockChainId")]
        public string BlockChainId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockchainWithdrawal")]
        public bool BlockchainWithdrawal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockchainIntegrationLayerId")]
        public string BlockchainIntegrationLayerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BlockchainIntegrationLayerAssetId")]
        public string BlockchainIntegrationLayerAssetId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BuyScreen")]
        public bool BuyScreen { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CategoryId")]
        public string CategoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CrosschainWithdrawal")]
        public bool CrosschainWithdrawal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefaultOrder")]
        public int DefaultOrder { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DefinitionUrl")]
        public string DefinitionUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayAccuracy")]
        public int? DisplayAccuracy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DisplayId")]
        public string DisplayId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "DustLimit")]
        public double DustLimit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ForwardBaseAsset")]
        public string ForwardBaseAsset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ForwardFrozenDays")]
        public int ForwardFrozenDays { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ForwardMemoUrl")]
        public string ForwardMemoUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ForwardWithdrawal")]
        public bool ForwardWithdrawal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HideDeposit")]
        public bool HideDeposit { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HideIfZero")]
        public bool HideIfZero { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HideWithdraw")]
        public bool HideWithdraw { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IconUrl")]
        public string IconUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IdIssuer")]
        public string IdIssuer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsBase")]
        public bool IsBase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsDisabled")]
        public bool IsDisabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsTradable")]
        public bool IsTradable { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IssueAllowed")]
        public bool IssueAllowed { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "KycNeeded")]
        public bool KycNeeded { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LowVolumeAmount")]
        public double? LowVolumeAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MultiplierPower")]
        public int MultiplierPower { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NotLykkeAsset")]
        public bool NotLykkeAsset { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PartnerIds")]
        public IList<string> PartnerIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SellScreen")]
        public bool SellScreen { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SwiftDepositEnabled")]
        public bool SwiftDepositEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "SwiftWithdrawal")]
        public bool SwiftWithdrawal { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Erc20Token'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public AssetType? Type { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsTrusted")]
        public bool IsTrusted { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PrivateWalletsEnabled")]
        public bool PrivateWalletsEnabled { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CashinMinimalAmount")]
        public double CashinMinimalAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CashoutMinimalAmount")]
        public double CashoutMinimalAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LykkeEntityId")]
        public string LykkeEntityId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
