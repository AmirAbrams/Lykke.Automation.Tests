// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.AutorestClient.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for TransactionExecutionError.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TransactionExecutionError
    {
        [EnumMember(Value = "unknown")]
        Unknown,
        [EnumMember(Value = "amountIsTooSmall")]
        AmountIsTooSmall,
        [EnumMember(Value = "notEnoughtBalance")]
        NotEnoughtBalance,
        [EnumMember(Value = "buildingShouldBeRepeated")]
        buildingShouldBeRepeated
    }
    internal static class TransactionExecutionErrorEnumExtension
    {
        internal static string ToSerializedValue(this TransactionExecutionError? value)
        {
            return value == null ? null : ((TransactionExecutionError)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this TransactionExecutionError value)
        {
            switch( value )
            {
                case TransactionExecutionError.Unknown:
                    return "unknown";
                case TransactionExecutionError.AmountIsTooSmall:
                    return "amountIsTooSmall";
                case TransactionExecutionError.NotEnoughtBalance:
                    return "notEnoughtBalance";
                case TransactionExecutionError.buildingShouldBeRepeated:
                    return "buildingShouldBeRepeated";
            }
            return null;
        }

        internal static TransactionExecutionError? ParseTransactionExecutionError(this string value)
        {
            switch( value )
            {
                case "unknown":
                    return TransactionExecutionError.Unknown;
                case "amountIsTooSmall":
                    return TransactionExecutionError.AmountIsTooSmall;
                case "notEnoughtBalance":
                    return TransactionExecutionError.NotEnoughtBalance;
                case "buildingShouldBeRepeated":
                    return TransactionExecutionError.buildingShouldBeRepeated;
            }
            return null;
        }
    }
}
