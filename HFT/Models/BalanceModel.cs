// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Balance response model for the wallets balance request.
    /// </summary>
    public partial class BalanceModel
    {
        /// <summary>
        /// Initializes a new instance of the BalanceModel class.
        /// </summary>
        public BalanceModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BalanceModel class.
        /// </summary>
        /// <param name="assetId">The asset identifier.</param>
        /// <param name="balance">The asset balance.</param>
        /// <param name="reserved">The reserved asset balance.</param>
        public BalanceModel(string assetId, double balance, double reserved)
        {
            AssetId = assetId;
            Balance = balance;
            Reserved = reserved;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the asset identifier.
        /// </summary>
        [JsonProperty(PropertyName = "AssetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or sets the asset balance.
        /// </summary>
        [JsonProperty(PropertyName = "Balance")]
        public double Balance { get; set; }

        /// <summary>
        /// Gets or sets the reserved asset balance.
        /// </summary>
        [JsonProperty(PropertyName = "Reserved")]
        public double Reserved { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetId");
            }
        }
    }
}
