// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Client.AutorestClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;

    /// <summary>
    /// Asset pair response model for asset pairs requests.
    /// </summary>
    public partial class AssetPairModel
    {
        /// <summary>
        /// Initializes a new instance of the AssetPairModel class.
        /// </summary>
        public AssetPairModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AssetPairModel class.
        /// </summary>
        /// <param name="id">The asset-pair identifier, eg BTCUSD.</param>
        /// <param name="baseAssetId">The base asset id, eg BTC in case of
        /// BTC/USD.</param>
        /// <param name="quotingAssetId">The quoting asset id, eg USD in case
        /// of BTC/USD.</param>
        /// <param name="name">The name of the asset pair, eg. BTC/USD.</param>
        /// <param name="accuracy">The decimal accuracy of the asset
        /// pair.</param>
        /// <param name="invertedAccuracy">The inverted decimal accuracy of the
        /// asset pair.</param>
        /// <param name="minVolume">The minimum required volume when placing an
        /// order.</param>
        /// <param name="minInvertedVolume">The inverted minimum required
        /// volume when placing an order.</param>
        public AssetPairModel(string id, string baseAssetId, string quotingAssetId, string name, int accuracy, int invertedAccuracy, double minVolume, double minInvertedVolume)
        {
            Id = id;
            BaseAssetId = baseAssetId;
            QuotingAssetId = quotingAssetId;
            Name = name;
            Accuracy = accuracy;
            InvertedAccuracy = invertedAccuracy;
            MinVolume = minVolume;
            MinInvertedVolume = minInvertedVolume;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the asset-pair identifier, eg BTCUSD.
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the base asset id, eg BTC in case of BTC/USD.
        /// </summary>
        [JsonProperty(PropertyName = "BaseAssetId")]
        public string BaseAssetId { get; set; }

        /// <summary>
        /// Gets or sets the quoting asset id, eg USD in case of BTC/USD.
        /// </summary>
        [JsonProperty(PropertyName = "QuotingAssetId")]
        public string QuotingAssetId { get; set; }

        /// <summary>
        /// Gets or sets the name of the asset pair, eg. BTC/USD.
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the decimal accuracy of the asset pair.
        /// </summary>
        [JsonProperty(PropertyName = "Accuracy")]
        public int Accuracy { get; set; }

        /// <summary>
        /// Gets or sets the inverted decimal accuracy of the asset pair.
        /// </summary>
        [JsonProperty(PropertyName = "InvertedAccuracy")]
        public int InvertedAccuracy { get; set; }

        /// <summary>
        /// Gets or sets the minimum required volume when placing an order.
        /// </summary>
        [JsonProperty(PropertyName = "MinVolume")]
        public double MinVolume { get; set; }

        /// <summary>
        /// Gets or sets the inverted minimum required volume when placing an
        /// order.
        /// </summary>
        [JsonProperty(PropertyName = "MinInvertedVolume")]
        public double MinInvertedVolume { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (BaseAssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BaseAssetId");
            }
            if (QuotingAssetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "QuotingAssetId");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
