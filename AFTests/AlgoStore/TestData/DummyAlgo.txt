using Lykke.AlgoStore.Algo;
using Lykke.AlgoStore.Algo.Indicators;

namespace Lykke.AlgoStore.CSharp.Algo.Implemention.ExecutableClass
{
    sealed class AlgoWithOrderEvents : BaseAlgo
    {
        public SMA _shortSma { get; set; }
        public SMA _longSma { get; set; }

        public override void OnStartUp()
        {
            _shortSma = SMA("SMA_Short");
            _longSma = SMA("SMA_Long");
        }

        public override void OnQuoteReceived(IQuoteContext context)
        {
            // Create a buy order
            var order = context.Orders.Market.Create(OrderAction.Buy, Volume);

            // Bind events
            order.OnFulfilled += OnOrderCompleted;
            order.OnErrored += OnOrderErrored;
        }

        public override void OnCandleReceived(ICandleContext context)
        {
            var candle = context.Data.Candle;

            if (candle.Close < 500)
            {
                var order = context.Orders.Market.Create(OrderAction.Buy, Volume);

                context.Actions.Log($"Function values are: SMA_Short: {_shortSma.Value}, SMA_Long: {_longSma.Value}");

                // Bind events
                order.OnFulfilled += OnOrderCompleted;
                order.OnErrored += OnOrderErrored;
            }

            if (candle.Close > 500)
            {
                var order = context.Orders.Market.Create(OrderAction.Sell, Volume);

                context.Actions.Log($"Function values are: SMA_Short: {_shortSma.Value}, SMA_Long: {_longSma.Value}");

                // Bind events
                order.OnFulfilled += OnOrderCompleted;
                order.OnErrored += OnOrderErrored;
            }
        }

        private void OnOrderCompleted(IMarketOrder order)
        {
            // do something here
            var volumeSold = order.Volume;
        }

        private void OnOrderErrored(IMarketOrder order, TradeErrorCode errorCode,
            string message)
        {
            // handle error here
            var status = order.Status;

            if (errorCode == TradeErrorCode.RequestTimeout)
            {
                // ...
            }
        }
    }
}
